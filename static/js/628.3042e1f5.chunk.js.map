{"version":3,"file":"static/js/628.3042e1f5.chunk.js","mappings":"6MA6CAA,EAAAA,EAAQC,QAAQC,EAAAA,IAChB,QA1CoBC,IAAgE,IAA/D,SAAEC,EAAW,CAAC,EAAG,EAAG,GAAE,SAAEC,EAAW,CAAC,EAAG,EAAG,GAAE,MAAEC,EAAQ,GAAGH,EAE5E,MAAM,MAAEI,EAAK,WAAEC,IAAeR,EAAAA,EAAAA,GAAQE,EAAAA,IAGhCO,GAAQC,EAAAA,EAAAA,QAAO,OAGf,QAAEC,IAAYC,EAAAA,EAAAA,GAAcJ,EAAYD,GAsB9C,OAnBAM,EAAAA,EAAAA,YAAU,KACJF,IAEFG,QAAQC,IAAI,qBAAsBJ,GAG9BA,EAAQ,4BACVA,EAAQ,2BAA2BK,OAEvC,GACC,CAACL,KAGJM,EAAAA,EAAAA,IAAS,KACHR,EAAMS,SACRT,EAAMS,QAAQC,QAChB,KAIAC,EAAAA,EAAAA,KAAA,aACEC,OAAQd,EACRH,SAAUA,EACVC,SAAUA,EACVC,MAAOA,EACPgB,YAAU,EACVC,eAAa,GACb,C,oECtCN,SAASX,EAAcY,EAAOC,GAC5B,MAAMC,EAAMC,EAAAA,UACLC,GAAaD,EAAAA,UAAe,IAAMF,EAAOA,aAAgBI,EAAAA,SAAW,CACzEX,QAASO,GACPA,EAAOC,KAEJjB,GAASkB,EAAAA,UAAe,IAAM,IAAIG,EAAAA,oBAAeC,KACxDJ,EAAAA,iBAAsB,KAChBF,IAAMG,EAAUV,QAAUO,aAAgBI,EAAAA,SAAWJ,EAAOA,EAAKP,SACrET,EAAMuB,MAAQJ,EAAUV,OAAO,IAEjC,MAAMe,EAAcN,EAAAA,OAAa,CAAC,GAC5BO,EAAMP,EAAAA,SAAc,KACxB,MAAMhB,EAAU,CAAC,EAUjB,OATAa,EAAMW,SAAQC,GAAQC,OAAOC,eAAe3B,EAASyB,EAAKG,KAAM,CAC9DC,YAAY,EACZC,GAAAA,GACE,GAAIb,EAAUV,QACZ,OAAOe,EAAYf,QAAQkB,EAAKG,QAAUN,EAAYf,QAAQkB,EAAKG,MAAQ9B,EAAMiC,WAAWN,EAAMR,EAAUV,SAEhH,EACAyB,cAAc,MAET,CACLjB,IAAKE,EACLJ,QACAb,UACAiC,MAAOpB,EAAMqB,KAAIC,GAAKA,EAAEP,OACxB9B,QACD,GACA,CAACe,IAeJ,OAdAP,EAAAA,EAAAA,IAAS,CAAC8B,EAAOC,IAAUvC,EAAMU,OAAO6B,KACxCrB,EAAAA,WAAgB,KACd,MAAMsB,EAAcrB,EAAUV,QAC9B,MAAO,KAELe,EAAYf,QAAU,CAAC,EACvBT,EAAMyC,gBACNb,OAAOc,OAAOjB,EAAIvB,SAASwB,SAAQiB,IAC7BH,GACFxC,EAAM4C,cAAcD,EAAQH,EAC9B,GACA,CACH,GACA,CAACzB,IACGU,CACT,C","sources":["components/RaichuModel.js","../node_modules/@react-three/drei/core/useAnimations.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Raichu } from \"some-3d-models\";\nconst RaichuModel = ({ position = [0, 0, 0], rotation = [0, 0, 0], scale = 1 }) => {\n  // 加载 GLB 文件\n  const { scene, animations } = useGLTF(Raichu);\n  \n  // 创建 AnimationMixer 用于控制动画\n  const mixer = useRef(null);\n\n  // 获取并控制加载的动画\n  const { actions } = useAnimations(animations, scene);\n\n  // 在组件加载时启动动画\n  useEffect(() => {\n    if (actions) {\n      // 打印 actions 中包含的动画名称\n      console.log(\"Available actions:\", actions);\n\n      // 假设 GLB 中的动画名称是 \"Armature|ArmatureAction\"，你需要根据日志中的名称来选择动画\n      if (actions[\"Armature|ArmatureAction\"]) {\n        actions[\"Armature|ArmatureAction\"].play(); // 播放指定动画\n      }\n    }\n  }, [actions]);\n\n  // 在每帧更新动画，不需要手动调用 update\n  useFrame(() => {\n    if (mixer.current) {\n      mixer.current.update(); // 这里不再需要调用 .update(delta)\n    }\n  });\n\n  return (\n    <primitive\n      object={scene}\n      position={position}\n      rotation={rotation}\n      scale={scale}\n      castShadow\n      receiveShadow\n    />\n  );\n};\nuseGLTF.preload(Raichu)\nexport default RaichuModel;\n","import * as React from 'react';\nimport { Object3D, AnimationMixer } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nfunction useAnimations(clips, root) {\n  const ref = React.useRef();\n  const [actualRef] = React.useState(() => root ? root instanceof Object3D ? {\n    current: root\n  } : root : ref);\n  // eslint-disable-next-line prettier/prettier\n  const [mixer] = React.useState(() => new AnimationMixer(undefined));\n  React.useLayoutEffect(() => {\n    if (root) actualRef.current = root instanceof Object3D ? root : root.current;\n    mixer._root = actualRef.current;\n  });\n  const lazyActions = React.useRef({});\n  const api = React.useMemo(() => {\n    const actions = {};\n    clips.forEach(clip => Object.defineProperty(actions, clip.name, {\n      enumerable: true,\n      get() {\n        if (actualRef.current) {\n          return lazyActions.current[clip.name] || (lazyActions.current[clip.name] = mixer.clipAction(clip, actualRef.current));\n        }\n      },\n      configurable: true\n    }));\n    return {\n      ref: actualRef,\n      clips,\n      actions,\n      names: clips.map(c => c.name),\n      mixer\n    };\n  }, [clips]);\n  useFrame((state, delta) => mixer.update(delta));\n  React.useEffect(() => {\n    const currentRoot = actualRef.current;\n    return () => {\n      // Clean up only when clips change, wipe out lazy actions and uncache clips\n      lazyActions.current = {};\n      mixer.stopAllAction();\n      Object.values(api.actions).forEach(action => {\n        if (currentRoot) {\n          mixer.uncacheAction(action, currentRoot);\n        }\n      });\n    };\n  }, [clips]);\n  return api;\n}\n\nexport { useAnimations };\n"],"names":["useGLTF","preload","Raichu","_ref","position","rotation","scale","scene","animations","mixer","useRef","actions","useAnimations","useEffect","console","log","play","useFrame","current","update","_jsx","object","castShadow","receiveShadow","clips","root","ref","React","actualRef","Object3D","AnimationMixer","undefined","_root","lazyActions","api","forEach","clip","Object","defineProperty","name","enumerable","get","clipAction","configurable","names","map","c","state","delta","currentRoot","stopAllAction","values","action","uncacheAction"],"sourceRoot":""}