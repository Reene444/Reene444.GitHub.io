{"version":3,"file":"static/js/554.5915af01.chunk.js","mappings":"2NASA,MAiEA,EAjEwBA,IAAgE,IAA/D,SAAEC,EAAW,CAAC,EAAG,EAAG,GAAE,SAAEC,EAAW,CAAC,EAAG,EAAG,GAAE,MAAEC,EAAQ,GAAGH,EAChF,MAAM,MAAEI,IAAUC,EAAAA,EAAAA,GAAQC,EAAAA,IACpBC,GAAeC,EAAAA,EAAAA,UACfC,GAAWD,EAAAA,EAAAA,UACXE,GAAsBF,EAAAA,EAAAA,WAC5BG,EAAAA,EAAAA,YAAU,KACRF,EAASG,QAAQC,UAAUC,IACzB,GAAIA,EAAMC,OAAQ,CAEhB,MAAMC,EAAmB,IAAIC,EAAAA,qBAA2B,CACtDC,MAAO,SACPC,SAAU,IAAIF,EAAAA,MAAY,UAC1BG,kBAAmB,EACnBC,aAAa,EACbC,QAAS,KAGXR,EAAMS,SAAWP,EACjBN,EAAoBE,QAAUI,CAChC,IACA,GACD,KAEHQ,EAAAA,EAAAA,IAAS,CAACC,EAAOC,KACf,GAAIhB,EAAoBE,QAAS,CAC/B,MAAMe,EAAOF,EAAMG,MAAMC,iBACzBnB,EAAoBE,QAAQQ,kBAAoB,IAA2B,GAArBU,KAAKC,IAAW,EAAPJ,EACjE,KAeF,OACEK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAACC,KAAK,QAAQC,UAAU,UAAUC,IAAKhC,EAAciC,iBAXrCC,IAE5B,GADAC,QAAQC,IAAI,sBAAuBF,IAC9BlC,EAAaK,QAAS,OAI3BgC,OAAOC,KAAK,8BAA+B,SAAU,4DAA4D,EAKTX,UACpGC,EAAAA,EAAAA,KAAA,aACEjB,MAAM,WACNqB,IAAK9B,EACLqC,OAAQ1C,EACRH,SAAUA,EACVC,SAAUA,EACVC,MAAO4C,MAAMC,QAAQ7C,GAASA,EAAQ,CAACA,EAAOA,EAAOA,GACrD8C,QAvBYC,KAClBN,OAAOC,KAAK,8BAA+B,SAAU,4DAA4D,EAuB3GM,YAAU,EACVC,eAAa,OAGjBpB,EAAAA,EAAAA,MAACqB,EAAAA,EAAc,CAACC,cAAe,EAAEpB,SAAA,EAC/BC,EAAAA,EAAAA,KAACoB,EAAAA,EAAK,CAACC,WAAY,EAAGC,mBAAoB,EAAGC,mBAAoB,GAAKC,UAAW,MACjFxB,EAAAA,EAAAA,KAACoB,EAAAA,EAAK,CAACC,WAAYI,EAAAA,GAAWC,KAAMJ,mBAAoB,EAAGC,mBAAoB,EAAGC,UAAW,UAE9F,EAMPtD,EAAAA,EAAQyD,QAAQxD,EAAAA,G","sources":["components/GithubTextModel.js"],"sourcesContent":["import React, { useRef, useEffect, Suspense } from 'react'\nimport { useGLTF, Environment, PerspectiveCamera, OrbitControls } from '@react-three/drei'\nimport { RigidBody, TrimeshCollider } from '@react-three/rapier'\nimport { Canvas } from '@react-three/fiber'\nimport { KernelSize } from 'postprocessing'\nimport { EffectComposer, Bloom } from '@react-three/postprocessing'\nimport { useFrame } from '@react-three/fiber'\nimport { GithubText } from 'some-3d-models'\nimport * as THREE from 'three'\nconst GithubTextModel = ({ position = [0, 0, 0], rotation = [0, 0, 0], scale = 1 }) => {\n  const { scene } = useGLTF(GithubText)\n  const rigidBodyRef = useRef()\n  const modelRef = useRef()\n  const emissiveMaterialRef = useRef()\n  useEffect(() => {\n    modelRef.current.traverse((child) => {\n      if (child.isMesh) {\n        // 创建可发光的材质\n        const emissiveMaterial = new THREE.MeshStandardMaterial({\n          color: 0xffffff, // 基础颜色\n          emissive: new THREE.Color(0xffa500), // 发光颜色\n          emissiveIntensity: 1, // 发光强度\n          transparent: true,\n          opacity: 0.7,\n        })\n\n        child.material = emissiveMaterial\n        emissiveMaterialRef.current = emissiveMaterial\n      }\n    })\n  }, [])\n  // 脉动效果\n  useFrame((state, delta) => {\n    if (emissiveMaterialRef.current) {\n      const time = state.clock.getElapsedTime()\n      emissiveMaterialRef.current.emissiveIntensity = 1.5 + Math.sin(time * 2) * 0.5\n    }\n  })\n  const handleClick = () => {\n    window.open('https://github.com/Reene444', '_blank', 'noopener,noreferrer,width=800,height=600,top=100,left=100')\n  }\n\n  const handleCollisionEnter = (e) => {\n    console.log('Collision detected:', e)\n    if (!rigidBodyRef.current) return\n\n    const impulse = [0, 1, 0] // Upward impulse\n    // rigidBodyRef.current.applyImpulse(impulse, true)\n    window.open('https://github.com/Reene444', '_blank', 'noopener,noreferrer,width=800,height=600,top=100,left=100')\n  }\n\n  return (\n    <>\n      <RigidBody type=\"fixed\" colliders=\"trimesh\" ref={rigidBodyRef} onCollisionEnter={handleCollisionEnter}>\n        <primitive\n          color=\"0xffa500\"\n          ref={modelRef}\n          object={scene}\n          position={position}\n          rotation={rotation}\n          scale={Array.isArray(scale) ? scale : [scale, scale, scale]}\n          onClick={handleClick}\n          castShadow\n          receiveShadow\n        />\n      </RigidBody>\n      <EffectComposer multisampling={1}>\n        <Bloom kernelSize={3} luminanceThreshold={0} luminanceSmoothing={0.4} intensity={0.6} />\n        <Bloom kernelSize={KernelSize.HUGE} luminanceThreshold={0} luminanceSmoothing={0} intensity={0.5} />\n      </EffectComposer>\n    </>\n  )\n}\n\nexport default GithubTextModel\n\nuseGLTF.preload(GithubText)\n"],"names":["_ref","position","rotation","scale","scene","useGLTF","GithubText","rigidBodyRef","useRef","modelRef","emissiveMaterialRef","useEffect","current","traverse","child","isMesh","emissiveMaterial","THREE","color","emissive","emissiveIntensity","transparent","opacity","material","useFrame","state","delta","time","clock","getElapsedTime","Math","sin","_jsxs","_Fragment","children","_jsx","RigidBody","type","colliders","ref","onCollisionEnter","e","console","log","window","open","object","Array","isArray","onClick","handleClick","castShadow","receiveShadow","EffectComposer","multisampling","Bloom","kernelSize","luminanceThreshold","luminanceSmoothing","intensity","KernelSize","HUGE","preload"],"sourceRoot":""}